stages: 
    - build
    - test
    - deploy staging
    - deploy production


build website: 
    stage: build
    image: node:18-alpine
    script:
        - yarn install
        - yarn lint
        - yarn test
        - yarn build
    artifacts:
        paths: 
            - build  #keep the artifact because it will be used in another stage
            
# Testing the website
test website:
    image: node:18-alpine
    stage: test
    script:
        - yarn global add serve
        - apk add curl
        - serve -s build &
        - sleep 10
        - curl http://localhost:3000 | grep "React App"


.deploy:
    image:
        name: amazon/aws-cli:2.11.6
        entrypoint: [""]
    script: 
        - aws --version
        - aws s3 sync build s3://$AWS_S3_BUCKET --delete   # delete any objects in bucket if exist
        - curl $CI_ENVIRONMENT_URL | grep "React App"

################### Deploy the App in 2 Environments #######################
deploy to staging:
    stage: deploy staging
    environment: staging
    extends: .deploy   # use the .deploy section here


deploy to production:
    stage: deploy production
    environment: production
    extends: .deploy   # use the .deploy section here





# variables:
#   AWS_REGION: eu-north-1
#   PHASE: BUILD
# before_script:
#   - apk add --no-cache curl jq python2 py-pip git
#   - pip install awscli
#   - aws configure set region ${AWS_REGION}
#   - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#   - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
#   #   TF_VAR_region: "eu-north-1"
# #   TF_VAR_access_key: "$AWS_ACCESS_KEY_ID"
# #   TF_VAR_secret_key: "$AWS_SECRET_ACCESS_KEY"
# stages:
#   - plan
#   - deploy
# Plan:
#   # image:
#   #   name: hashicorp/terraform:0.14.4
#   #   entrypoint: [""]
#   stage: plan
#   image: alpine
#   before_script:
#     - apk update
#     - apk add --update curl unzip
#     - curl -LO https://releases.hashicorp.com/terraform/1.0.4/terraform_1.0.4_linux_amd64.zip
#     - unzip terraform_1.0.4_linux_amd64.zip
#     - mv terraform /usr/local/bin/
#     - terraform --version
#   artifacts:
#     paths:
#     - plan.bin
#     - app_config.zip
#     expire_in: 2 week
#   script:
#     - terraform init
#     - terraform plan -input=false -out=plan.bin
#   only:
#     variables:
#       - $PHASE == "BUILD"
# Apply:
#   image:
#     name: hashicorp/terraform:0.14.4
#     entrypoint: [""]
#   when: manual
#   stage: deploy
#   script:
#     - terraform init
#     - terraform apply -auto-approve -input=false plan.bin
#   only:
#     variables:
#       - $PHASE == "BUILD"
#   environment:
#     name: snunv
# # Destroy:
# #   image:
# #     name: hashicorp/terraform:0.14.4
# #     entrypoint: [""]
# #   stage: deploy
# #   script:
# #     - terraform init
# #     - terraform destroy -auto-approve
# #   only:
# #     variables:
# #       - $PHASE == "DESTROY"
# #   environment:
# #     name: snunv
# #     action: stop



















# image: hashicorp/terraform
  # entrypoint:
  #   - '/usr/bin/env'
  #   - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  #   - 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' 
  #   - 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' 
  #   - 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}'
# variables:
#   # PLAN: plan.tfplan
#   TF_VAR_region: "eu-north-1"
#   TF_VAR_access_key: "$AWS_ACCESS_KEY_ID"
#   TF_VAR_secret_key: "$AWS_SECRET_ACCESS_KEY"


# cache:
#   paths:
#     - .terraform

# before_script:
#   - terraform --version
#   - terraform init

#################################
# stages: 
#     - build
#     - test
#     - build infra
#     # - plan infra
#     # - apply infra
#     # - deploy infra
#     - deploy staging
#     - deploy production

# build website: 
#     stage: build
#     image: node:18-alpine
#     script:
#         - yarn install
#         - yarn lint
#         - yarn test
#         - yarn build
#     artifacts:
#         paths: 
#             - build

# test website:
#     stage: test
#     image: node:18-alpine
#     script:
#         - yarn global add serve
#         - apk add curl
#         - serve -s build &
#         - sleep 10
#         - curl http://localhost:3000 | grep "React App"

# build infrastructure: 
#     stage: build infra
    # image: hashicorp/tfc-agent
    # script:

    #     # - rm -rf .terraform
    #     - terraform --version
    #     - terraform init
    #     - terraform plan
    #     - terraform apply -auto-approve
    #     - terraform output -json staging-output | jq -r '.[0]' >> output.txt
    #     - terraform output -json production-output | jq -r '.[0]' >> output.txt
    # artifacts:
    #   paths: 
    #     - output.txt


################################################################


# plan:
#     stage: plan infra
#     script:
#         - terraform plan -out "planfile"
#     # dependencies:
#     #     - validate
#     artifacts:
#         paths:
#           - planfile
# apply:
#     stage: apply infra
#     script:
#         - terraform apply -input=false "planfile"
#     dependencies:
#         - plan
        # when: manual
    # services:
    #  - python:latest
    # before_script: 
    #     - aws --version
    #     - aws --version
    #     - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    #     - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    #     - aws configure set region $AWS_DEFAULT_REGION
# apply:
#   stage: apply infra
#   script:
#     - terraform apply -input=false "planfile"
#     - terraform output -json staging-output | jq -r '.[0]' >> output.txt
#     - terraform output -json production-output | jq -r '.[0]' >> output.txt
  
#   artifacts:
#     paths: 
#         - output.txt
#   dependencies:
#     - plan
#     script:

#         - terraform apply

# ##################################################3
# .deploy:
#    image: amazon/aws-cli
#    script: 
#      - aws --version
#      - aws s3 sync build s3://$AWS_S3_BUCKET 
#      - curl $CI_ENVIRONMENT_URL | grep "React App"

# deploy to staging:
#     stage: deploy staging
#     environment: staging
#     extends: .deploy



# deploy to production:
#     stage: deploy production
#     environment: production
#     extends: .deploy

